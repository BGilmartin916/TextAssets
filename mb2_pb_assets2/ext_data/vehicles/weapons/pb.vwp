maxrebo_laser
{
name		maxrebo_laser
projectile	1
saberBlockable	1
hasgravity 	0
muzzleFX	"maxrebo/blastermuzzleflash"
shotFX		"maxrebo/blastershot"
impactFX	"maxrebo/blasterhit"
impactFXEnhanced1	"maxrebo/blasterhit"
g2MarkShader	"gfx/damage/noteburnmark"
g2MarkSize	16
speed		3500
damage		30
ammoPerShot	1
}

pumpkinbomb
{
name		pumpkinbomb
projectile	0
hasGravity	1
model		"models/weapons2/pumpkin/thermal_proj.md3"
impactFX	"grenades/EXP_Conc"
g2MarkShader	"gfx/damage/bodybigburnmark1"
g2MarkSize	100
speed		600
damage		50
splashDamage	40
splashRadius	80
ammoPerShot	1
health	5
}


morgan_laser
{
name		morgan_laser
projectile	1
saberBlockable	1
muzzleFX	"morgan_wheelchair/blastermuzzleflash"
shotFX		"morgan_wheelchair/shot"
impactFX	"Blaster/Impact_Wall03"
impactFXEnhanced1	"Blaster/Impact_Wall03_E"
g2MarkShader	"gfx/damage/bodyburnmark1"
g2MarkSize	16
speed		3500
damage		45
ammoPerShot	1
}

pb_rocket
{
name		pb_rocket
projectile	1
model		"models/weapons2/merr_sonn/projectile.md3" //"models/weapons2/pumpkin/thermal_proj.md3"  
muzzleFX	"atst/alt_muzzleflash"
shotFX	"atst/side_alt_shot"
impactFX	"tripmine/explosion"
g2MarkShader	"gfx/damage/bodybigburnmark1"
g2MarkSize	48
loopSound	"sound/weapons/rocket/missleloop.wav"
speed		1100
//homing	0
//lockOnTime	0
damage	100
splashDamage	25
splashRadius	150
ammoPerShot	1
health	10
width		10
height	10
lifetime	10000
explodeOnExpire	1
}




gonk_rocket
{
name		pb_rocket
projectile	1
model		"models/weapons2/merr_sonn/projectile.md3" //"models/weapons2/pumpkin/thermal_proj.md3"  
muzzleFX	"atst/alt_muzzleflash"
shotFX	"atst/side_alt_shot"
impactFX	"tripmine/explosion"
g2MarkShader	"gfx/damage/bodybigburnmark1"
g2MarkSize	48
loopSound	"sound/weapons/rocket/missleloop.wav"
speed		1100
//homing	0
//lockOnTime	0
damage	50
splashDamage	25
splashRadius	150
ammoPerShot	1
health	10
width		10
height	10
lifetime	10000
explodeOnExpire	1
}


gonk_laser
{
name		gonk_laser
projectile	1
muzzleFX	"bryar/muzzle_flash"
shotFX		"bryar/shot"
impactFX	"bryar/wall_impact"
g2MarkShader	"gfx/effects/scorch"
g2MarkSize	26
speed		4000
damage		31
splashDamage	2
splashRadius	3
ammoPerShot	1
lifetime	2000
}

VXMortarProj
{
name		VXMortarProj
projectile	1
hasGravity	1
model		"models/weapons2/golan_arms/projectilemain.md3"
muzzleFX	"VXMortar/muzzle_flash"
shotFX		"VXMortar/shot"
impactFX	"VXMortar/blow"
g2MarkShader	"gfx/damage/bodybigburnmark1"
g2MarkSize	100
loopSound	"sound/weapons/rocket/missleloop.wav"
speed		1800
damage		300
splashDamage	150
splashRadius	200
ammoPerShot	1
health		100
width		10
height		10
lifetime	10000
explodeOnExpire	1
}



//name		//(STRING)name of weapon, use same name in .veh file, use no spaces or special characters
//{
//name			//(STRING) Unique name of weapon, must be same as the name above
//projectile	//(INT)0 = traceline, 1 = projectile (missile entity)
//hasGravity	//(INT)0 = no grav, 1 = normal grav (on projectiles only)
//ionWeapon		//(INT) 0 = not an ion weapon, 1 = disables ship shields and sends them out of control
//muzzleFX	//(STRING)path to Muzzle Effect, starting from "effects"
//shotFX		//(STRING)path to Shot Effect, starting from "effects"
//impactFX	//(STRING)path to Impact Effect, starting from "effects"
//impactFXEnhanced1	//(STRING)path to Impact Effect Enhanced 2, starting from "effects"
//g2MarkShaderHandle	//(STRING) name of shader to use for G2 marks made on other models when hit by this projectile
//g2MarkSize		//(FLOAT) size (diameter) of the ghoul2 mark
//loopSound	//(STRING)path to loopSound, starting from "base"
//speed		//(FLOAT)speed of projectile/range of traceline
//homing		//(FLOAT)0.0 = not homing, 0.5 = half vel to targ, half cur vel, 1.0 = all vel to targ
//homingFOV		//(FLOAT, -1.0 to 1.0) default 0.  Missile will lose lock on if DotProduct of missile direction and direction to target ever drops below this (-1 to 1, -1 = never lose target, 0 = lose if ship gets behind missile, 1 = pretty much will lose it's target right away)
//lockOnTime	//(INT)0 = no lock time needed, else # of ms needed to lock on
//damage		//(INT)damage done when traceline or projectile directly hits target
//splashDamage	//(INT)damage done to ents in splashRadius of end of traceline or projectile origin on impact
//splashRadius	//(FLOAT)radius that ent must be in to take splashDamage (linear fall-off)
//ammoPerShot	//(INT)how much "ammo" each shot takes
//health		//(INT)if non-zero, projectile can be shot, takes this much damage before being destroyed
//width		//(FLOAT)width of traceline or bounding box of projecile (non-rotating!)
//height  	//(FLOAT)height of traceline or bounding box of projecile (non-rotating!)
//lifetime	//(INT) after this many milliseconds, it will remove itself
//explodeOnExpire	//(INT) if set to 1, it will explode when lifetime is up, not just remove itself
//}
